"""–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è notification_service.py"""
import pytest
from unittest.mock import patch, Mock
from requests.exceptions import RequestException, Timeout, ConnectionError

from app.notification_service import NotificationService, reboot_required_message


class TestNotificationService:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ NotificationService"""

    def test_init(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        service = NotificationService()
        assert service.enabled is True
        assert service._timeout == 5.0
        
        service_disabled = NotificationService(enabled=False, timeout=10.0)
        assert service_disabled.enabled is False
        assert service_disabled._timeout == 10.0

    @patch('app.notification_service.TOKEN', 'test_token')
    @patch('requests.post')
    def test_send_success(self, mock_post):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        mock_response = Mock()
        mock_response.raise_for_status.return_value = None
        mock_post.return_value = mock_response

        service = NotificationService()
        service.send("Test Title", "Test message")

        mock_post.assert_called_once_with(
            "http://supervisor/core/api/services/persistent_notification/create",
            json={
                "title": "Test Title",
                "message": "Test message"
            },
            headers={"Authorization": "Bearer test_token"},
            timeout=5.0
        )

    @patch('app.notification_service.TOKEN', 'test_token')
    @patch('requests.post')
    def test_send_disabled(self, mock_post):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω"""
        service = NotificationService(enabled=False)
        service.send("Test Title", "Test message")

        mock_post.assert_not_called()

    @patch('app.notification_service.TOKEN', 'test_token')
    @patch('requests.post')
    def test_send_request_exception(self, mock_post):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ RequestException"""
        mock_post.side_effect = RequestException("Network error")

        service = NotificationService()
        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        service.send("Test Title", "Test message")

    @patch('app.notification_service.TOKEN', 'test_token')
    @patch('requests.post')
    def test_send_timeout_exception(self, mock_post):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Timeout"""
        mock_post.side_effect = Timeout("Request timeout")

        service = NotificationService()
        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        service.send("Test Title", "Test message")

    @patch('app.notification_service.TOKEN', 'test_token')
    @patch('requests.post')
    def test_send_connection_error(self, mock_post):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ ConnectionError"""
        mock_post.side_effect = ConnectionError("Connection failed")

        service = NotificationService()
        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        service.send("Test Title", "Test message")

    @patch('app.notification_service.TOKEN', 'test_token')
    @patch('requests.post')
    def test_send_http_error(self, mock_post):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP –æ—à–∏–±–∫–∏"""
        mock_response = Mock()
        mock_response.raise_for_status.side_effect = RequestException("HTTP 500")
        mock_post.return_value = mock_response

        service = NotificationService()
        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        service.send("Test Title", "Test message")

    @patch('app.notification_service.TOKEN', None)
    @patch('requests.post')
    def test_send_no_token(self, mock_post):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"""
        mock_response = Mock()
        mock_response.raise_for_status.return_value = None
        mock_post.return_value = mock_response

        service = NotificationService()
        service.send("Test Title", "Test message")

        mock_post.assert_called_once_with(
            "http://supervisor/core/api/services/persistent_notification/create",
            json={
                "title": "Test Title",
                "message": "Test message"
            },
            headers={"Authorization": "Bearer None"},
            timeout=5.0
        )


class TestRebootRequiredMessage:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ reboot_required_message"""

    def test_reboot_required_message_with_version(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–µ—Ä—Å–∏–µ–π"""
        result = reboot_required_message("15.2.1")
        assert "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –≤–µ—Ä—Å–∏–∏ 15.2.1 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" in result
        assert "üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã" in result
        assert "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É" in result

    def test_reboot_required_message_without_version(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –≤–µ—Ä—Å–∏–∏"""
        result = reboot_required_message()
        assert "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" in result
        assert "üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã" in result
        assert "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É" in result

    def test_reboot_required_message_empty_version(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—É—Å—Ç–æ–π –≤–µ—Ä—Å–∏–µ–π"""
        result = reboot_required_message("")
        assert "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" in result
        assert "üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã" in result

    def test_reboot_required_message_none_version(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å None –≤–µ—Ä—Å–∏–µ–π"""
        result = reboot_required_message(None)
        assert "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" in result
        assert "üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã" in result